// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// npx prisma migrate dev --name init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  createdAt DateTime @default(now())

  // Define a relation to recipes created by this user
  recipes  recipes[]  @relation("user_recipes")
  // ShoppingList ShoppingList[]
  ListItem ListItem[]
  storage  storage[]
  notes    notes[]
}

model recipes {
  id           Int      @id @default(autoincrement())
  name         String
  instructions String
  amounts      String[]
  ingredients  String[]
  tags         String[]
  imageUrl     String?
  createdAt    DateTime @default(now())
  prep_time    String?
  cook_time    String?
  comment      String?
  user         users    @relation("user_recipes", fields: [userId], references: [id])
  userId       Int      @default(1)
  notes        notes[]
}

model Foods {
  id            Int      @id @default(autoincrement())
  name          String
  category      String?
  calories      Float?
  protein       Float?
  fat           Float?
  carbohydrates Float?
  fiber         Float?
  sugar         Float?
  allergens     String[]
  isVegan       Boolean?
  isVegetarian  Boolean?
}

model ListItem {
  id         Int     @id @default(autoincrement())
  amount     String
  ingredient String
  checked    Boolean @default(false)
  userId     Int
  users      users   @relation(fields: [userId], references: [id])
}

model storage {
  id Int @id @default(autoincrement())

  amount     String
  ingredient String
  category   String[]
  userId     Int
  users      users    @relation(fields: [userId], references: [id])
}

model notes {
  id       Int     @id @default(autoincrement())
  note     String
  userId   Int
  recipeID Int
  users    users   @relation(fields: [userId], references: [id])
  Recipes  recipes @relation(fields: [recipeID], references: [id])
}

//model ShoppingList {
//  id        Int        @id @default(autoincrement())
//  userId    Int
//  users     users       @relation(fields: [userId], references: [id])
//  name      String
//  createdAt DateTime   @default(now())
//  items     ListItem[] @relation("ShoppingListItems")
//
//}
